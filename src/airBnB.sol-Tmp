// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract airbnb {

    address public owner;
    //unit256 private counter;
    uint256 private counter = 0;

    constructor() {
        counter = 0;
        owner = msg.sender;
    }

    struct rentalInfo {
        string name;
        string city;
        string lat;
        string long;
        string unoDescription;
        string dosDescription;
        string imgUrl;
        unit256 maxGuests;
        unit256 pricePerDay;
        string[] datesBooked;
        unit256 id;
        address renter;
    }

    event rentalCreated (
        string name,
        string city,
        string lat,
        string long,
        string unoDescription,
        string dosDescription,
        string imgUrl,
        unit256 maxGuests,
        unit256 pricePerDay,
        string[] datesBooked,
        unit256 id,
        address renter
    );

    event newDatesBooked (
        string[] datesBooked,
        unit256 id,
        address booker,
        string city,
        string imgUrl
    );

    mapping(unit256 => rentalInfo) rentals;
    unit256[] public rentalIds;


    function addRentals(
        string memory name,
        string memory city,
        string memory lat,
        string memory long,
        string memory unoDescription,
        string memory dosDescription,
        string memory imgUrl,
        unit256 maxGuests,
        unit256 pricePerDay,
        string[] memory datesBooked
    ) public {
        require(msg.sender == owner, "Only owner of smart contract can put up rentals");
        rentalInfo storage newRental = rentals[counter];
        newRental.name = name;
        newRental.city = city;
        newRental.lat = lat;
        newRental.long = long;
        newRental.unoDescription = unoDescription;
        newRental.dosDescription = dosDescription;
        newRental.imgUrl = imgUrl;
        newRental.maxGuests = maxGuests;
        newRental.pricePerDay = pricePerDay;
        newRental.datesBooked = datesBooked;
        newRental.id = counter;
        newRental.renter = owner;
        rentalIds.push(counter);
        emit rentalCreated(
            name,
            city,
            lat,
            long,
            unoDescription,
            dosDescription,
            imgUrl,
            maxGuests,
            pricePerDay,
            datesBooked,
            counter,
            owner);
        counter++;
    }

    function checBookings(unit256 id, string[] memory newBookings) private view returns (bool){

        for (uint i = 0; i < newBookings.length; i++){
            for (uint j = 0; j < rentals[id].newDatesBooked.length; j++) {
                if (keccak256(abi.encodePacked(rentals[id].datesBooked[j])) == keccak256(abi.encodePacket(newBookings[i]))){
                    return false;
                }
            }
        }
        return true;
    }

    function addDatesBooked(unit256 id, string[] memory newBookings) public payable {
        require(id < counter, "No such Rentals");
        require(checkBookings(id, newBookings), "Already Booked For Requested Date");
        require(msg.value == (rentals[id].pricePerDay * 1 ether * newBookings.length), "Please submit the asking price in order to comlete the purchase");        

        for (uint i = 0; i < newBooking.length; i++) {
            rentals[id].datesBooked.push(newBookings[i]);
        }

        payable(owner).transfer(msg.value);
        emit newDatesBooked(newBookings, id, msg.sender, rentals[id].city, rentals[id].imgurl);
    }    

    function getrental(unit256 id) public view returns (string memory, unit256, string[] memory){
        require(id < counter, "No such Rental");

        rentalInfo storage s = rentals[id];
        return (s.name,s.pricePerDay,s.datesBooked);
    }


}
